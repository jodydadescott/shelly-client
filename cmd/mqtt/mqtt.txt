package mqtt

import (
	"context"
	"log"
	"net/http"
	"os"
	"time"

	mqtt "github.com/eclipse/paho.mqtt.golang"
	"github.com/jinzhu/copier"
	"go.uber.org/zap"
)

type Config struct {
	Broker      string
	ClientID    string
	KeepAlive   time.Duration
	PingTimeout time.Duration
}

// Clone return copy
func (t *Config) Clone() *Config {
	c := &Config{}
	copier.Copy(&c, &t)
	return c
}

type MQTT struct {
}

// Listen ...
func (t *MQTT) Run(ctx context.Context) error {
	zap.L().Debug("Run(ctx)")

	mqtt.DEBUG = log.New(os.Stdout, "", 0)
	mqtt.ERROR = log.New(os.Stdout, "", 0)
	opts := mqtt.NewClientOptions().AddBroker("tcp://iot.eclipse.org:1883").SetClientID("gotrivial")
	opts.SetKeepAlive(2 * time.Second)
	opts.SetPingTimeout(1 * time.Second)

	client := mqtt.NewClient(opts)

	if token := client.Connect(); token.Wait() && token.Error() != nil {
		panic(token.Error())
	}

	token.WaitTimeout(time.Second * 30)
	if token.Error() != nil {
		return token.Error()
	}

	token := c.Publish("go-mqtt/sample", 0, false, text)

	// token.Wait() && token.Error() != nil {
	// 	panic(token.Error())
	// }

	go func() {

		ctx2, cancel := context.WithTimeout(ctx, 5*time.Second)
		defer cancel()

		<-ctx.Done()
		zap.L().Debug("context cancelled; shutting down HTTP server")

	}()

	if err == http.ErrServerClosed {
		return nil
	}

	return err
}

// func main() {
// 	mqtt.DEBUG = log.New(os.Stdout, "", 0)
// 	mqtt.ERROR = log.New(os.Stdout, "", 0)
// 	opts := mqtt.NewClientOptions().AddBroker("tcp://iot.eclipse.org:1883").SetClientID("gotrivial")
// 	opts.SetKeepAlive(2 * time.Second)
// 	opts.SetDefaultPublishHandler(f)
// 	opts.SetPingTimeout(1 * time.Second)

// 	c := mqtt.NewClient(opts)
// 	if token := c.Connect(); token.Wait() && token.Error() != nil {
// 		panic(token.Error())
// 	}

// 	if token := c.Subscribe("go-mqtt/sample", 0, nil); token.Wait() && token.Error() != nil {
// 		fmt.Println(token.Error())
// 		os.Exit(1)
// 	}

// 	for i := 0; i < 5; i++ {
// 		text := fmt.Sprintf("this is msg #%d!", i)
// 		token := c.Publish("go-mqtt/sample", 0, false, text)
// 		token.Wait()
// 	}

// 	time.Sleep(6 * time.Second)

// 	if token := c.Unsubscribe("go-mqtt/sample"); token.Wait() && token.Error() != nil {
// 		fmt.Println(token.Error())
// 		os.Exit(1)
// 	}

// 	c.Disconnect(250)

// 	time.Sleep(1 * time.Second)
// }
